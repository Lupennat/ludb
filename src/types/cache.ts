import ExpressionContract from '../query/expression-contract';
import { BindingExclude, BindingExcludeObject } from './generics';

export interface CacheSessionOptions {
    /**
     * Custom Key for session
     */
    key?: string;
    /**
     * Cache strategy for session
     */
    cache?: number | (() => number) | boolean;
    /**
     * Cache driver options for session
     */
    options?: Record<string, any>;
}

export interface QueryCacheConnection extends CacheSessionOptions {
    /**
     * The query string
     */
    query: string;

    /**
     * The query bindings
     */
    bindings: BindingExclude<ExpressionContract>[] | BindingExcludeObject<ExpressionContract>;
}

export interface QueryCache {
    /**
     * the ttl for key
     */
    duration: number;

    /**
     * Time, when cache was created.
     */
    time: number;

    /**
     * The key cache
     */
    key: string;
}

export interface QueryCacheResponse<T = any> extends QueryCache {
    /**
     * The connection cache result
     */
    result?: T;
}

export interface QueryCacheStore<T = any> extends QueryCache {
    /**
     * The database result to store on cache
     */
    result: T;
}

export interface QueryCacheManager extends QueryCache {
    /**
     * The cache specific options for cache driver.
     */
    options: Record<string, any>;
}

export interface QueryCacheManagerResponse<T = any> extends QueryCacheManager {
    /**
     * The connection cache result
     */
    result?: T;
}

export interface QueryCacheManagerStore<T = any> extends QueryCacheManager {
    /**
     * The database result to store on cache
     */
    result: T;
}

export interface CacheDriverI {
    /**
     * Closes a connection with given cache provider.
     */
    disconnect(): Promise<void>;

    /**
     * Checks if cache is expired or not.
     */
    isExpired(time: number, duration: number, options: Record<string, any>): Promise<boolean>;

    /**
     * Get cached given query result.
     */
    get<T = any>(queryCache: QueryCache, options: Record<string, any>): Promise<QueryCacheResponse<T> | undefined>;

    /**
     * Stores given query result in the cache.
     */
    store<T = any>(queryCacheStore: QueryCacheStore<T>, options: Record<string, any>): Promise<void>;
}

export interface CacheConfiguration {
    /**
     * The Connection Cache resolver
     */
    resolver?: () => CacheDriverI;

    /**
     * The TTl for cache in milliseconds (default: 60000)
     */
    duration?: number | (() => number);

    /**
     * Always use cache (default: false)
     */
    always?: boolean;

    /**
     * The Prefix for all key generated by connection (default : '')
     */
    prefix?: string;

    /**
     * The cache specific options for cache driver.
     */
    options?: Record<string, any>;
}
